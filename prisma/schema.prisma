generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @unique @default(uuid())
  name        String?
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  city        City?         @relation(fields: [cityId], references: [id])
  cityId      String?
  roles       Role[]
  about       String?
  avatar      String?
  isCreator   Boolean       @default(false)
  earnings    Int           @default(0)
  gamesPlayed GameSession[]
  games       Game[]
}

model Country {
  id     String @id @unique
  name   String
  cities City[]
}

model City {
  id        String  @id @unique
  name      String
  latitude  Float
  longitude Float
  country   Country @relation(fields: [countryId], references: [id])
  countryId String
  games     Game[]
  users     User[]
}

model Role {
  role  String @id @unique
  users User[]
}

model Code {
  id           String        @id @unique @default(uuid())
  code         String
  createdAt    DateTime      @default(now())
  used         Boolean
  gameSessions GameSession[]
}

model GameSession {
  id         String   @id @unique @default(uuid())
  startedAt  DateTime @default(now())
  finishAt   DateTime
  game       Game     @relation(fields: [gameId], references: [id])
  user       User     @relation(fields: [userId], references: [id])
  code       Code     @relation(fields: [codeId], references: [id])
  score      Int
  hasCounter Boolean
  teamName   String
  gameId     String
  userId     String
  codeId     String
}

model Question {
  id         String   @id @unique @default(uuid())
  title      String
  images     String[]
  type       String
  answer     String
  score      Int
  order      Int?
  mapPoint   mapPoint @relation(fields: [mapPointId], references: [id])
  mapPointId String
  game       Game?    @relation(fields: [gameId], references: [id])
  gameId     String?
}

model mapPoint {
  id             String     @id @unique @default(uuid())
  name           String?
  latitude       Float
  longitude      Float
  games          Game[]
  startingPoints Game[]     @relation("StartingPoint")
  endingPoints   Game[]     @relation("EndingPoint")
  Question       Question[]
}

model Game {
  id               String        @id @unique @default(uuid())
  title            String
  description      String?
  images           String[]
  price            Int?
  gameSessions     GameSession[]
  author           User          @relation(fields: [authorId], references: [id])
  authorId         String
  quests           Question[]
  duration         Int?
  distance         Int?
  steps            Int?
  earnings         Int           @default(0)
  isPublished      Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  startingPoint    mapPoint?     @relation("StartingPoint", fields: [startingPointId], references: [id])
  endingPoint      mapPoint?     @relation("EndingPoint", fields: [endingPointId], references: [id])
  startingPointId  String?
  endingPointId    String?
  pointsOfInterest mapPoint[]
  city             City          @relation(fields: [cityId], references: [id])
  cityId           String
}
